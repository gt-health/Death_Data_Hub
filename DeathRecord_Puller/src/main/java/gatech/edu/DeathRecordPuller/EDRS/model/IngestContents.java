/*
 * EDRS Submission API
 * This is the swagger documentation for DeathDataHub's EDRS Submission API. This API's purpose is to allow Medical Examiners and coroners to submit a signed IngestDeathRecord to a remote Electronic Death Record System. Although this is part of the deathdatahub main platform, the parameters are complex enough to warrent it's own swagger doc file
 *
 * OpenAPI spec version: 1.0.0
 * Contact: Michael.Riley@gtri.gatech.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package gatech.edu.DeathRecordPuller.EDRS.model;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * All contextual information regarding the death. Note that causes and
 * contribution of death must be a valid LOINC code https://loinc.org/. If the
 * death is from a work injury, or transport injury, please add the
 * placeOfInjury and injuryDetails
 */
public class IngestContents {
	@SerializedName("actualOrPresumedDateOfDeath")
	private ZonedDateTime actualOrPresumedDateOfDeath = null;

	@SerializedName("autopsyPerformed")
	private Boolean autopsyPerformed = null;

	@SerializedName("autopsyResultsAvailable")
	private Boolean autopsyResultsAvailable = null;

	@SerializedName("causeOfDeath")
	private IngestCauseOfDeath causeOfDeath = null;

	@SerializedName("contributedToDeath")
	private List<IngestCauseOfDeath> contributedToDeath = null;

	@SerializedName("datePronouncedDead")
	private ZonedDateTime datePronouncedDead = null;

	@SerializedName("deathFromWorkInjury")
	private Boolean deathFromWorkInjury = null;

	@SerializedName("deathFromTransportInjury")
	private Boolean deathFromTransportInjury = null;

	@SerializedName("placeOfInjury")
	private String placeOfInjury = null;

	/**
	 * Gets or Sets mannerOfDeath
	 */
	@JsonAdapter(MannerOfDeathEnum.Adapter.class)
	public enum MannerOfDeathEnum {
		NATURAL("Natural"),

		ACCIDENT("Accident"),

		SUICIDE("Suicide"),

		HOMICIDE("Homicide"),

		PENDING_INVESTIGATION("Pending Investigation"),

		NOT_DETERMINED("Not determined");

		private String value;

		MannerOfDeathEnum(String value) {
			this.value = value;
		}

		@JsonValue
		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		@JsonCreator
		public static MannerOfDeathEnum fromValue(String text) {
			for (MannerOfDeathEnum b : MannerOfDeathEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		public static class Adapter extends TypeAdapter<MannerOfDeathEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final MannerOfDeathEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public MannerOfDeathEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return MannerOfDeathEnum.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("mannerOfDeath")
	private MannerOfDeathEnum mannerOfDeath = null;

	@SerializedName("medicalExaminerContacted")
	private Boolean medicalExaminerContacted = null;

	@SerializedName("timingOfRecentPregnancyInRelationToDeath")
	private String timingOfRecentPregnancyInRelationToDeath = null;

	/**
	 * Gets or Sets tobaccoUseContributedToDeath
	 */
	@JsonAdapter(TobaccoUseContributedToDeathEnum.Adapter.class)
	public enum TobaccoUseContributedToDeathEnum {
		YES("Yes"),

		NO("No"),

		PROBABLY("Probably"),

		UNKNOWN("Unknown"),

		NOT_ASKED("Not Asked");

		private String value;

		TobaccoUseContributedToDeathEnum(String value) {
			this.value = value;
		}

		@JsonValue
		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		@JsonCreator
		public static TobaccoUseContributedToDeathEnum fromValue(String text) {
			for (TobaccoUseContributedToDeathEnum b : TobaccoUseContributedToDeathEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		public static class Adapter extends TypeAdapter<TobaccoUseContributedToDeathEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final TobaccoUseContributedToDeathEnum enumeration)
					throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public TobaccoUseContributedToDeathEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return TobaccoUseContributedToDeathEnum.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("tobaccoUseContributedToDeath")
	private TobaccoUseContributedToDeathEnum tobaccoUseContributedToDeath = null;

	public IngestContents actualOrPresumedDateOfDeath(ZonedDateTime actualOrPresumedDateOfDeath) {
		this.actualOrPresumedDateOfDeath = actualOrPresumedDateOfDeath;
		return this;
	}

	/**
	 * Get actualOrPresumedDateOfDeath
	 * 
	 * @return actualOrPresumedDateOfDeath
	 **/

	public ZonedDateTime getActualOrPresumedDateOfDeath() {
		return actualOrPresumedDateOfDeath;
	}

	public void setActualOrPresumedDateOfDeath(ZonedDateTime actualOrPresumedDateOfDeath) {
		this.actualOrPresumedDateOfDeath = actualOrPresumedDateOfDeath;
	}

	public IngestContents autopsyPerformed(Boolean autopsyPerformed) {
		this.autopsyPerformed = autopsyPerformed;
		return this;
	}

	/**
	 * Get autopsyPerformed
	 * 
	 * @return autopsyPerformed
	 **/

	public Boolean isAutopsyPerformed() {
		return autopsyPerformed;
	}

	public void setAutopsyPerformed(Boolean autopsyPerformed) {
		this.autopsyPerformed = autopsyPerformed;
	}

	public IngestContents autopsyResultsAvailable(Boolean autopsyResultsAvailable) {
		this.autopsyResultsAvailable = autopsyResultsAvailable;
		return this;
	}

	/**
	 * Get autopsyResultsAvailable
	 * 
	 * @return autopsyResultsAvailable
	 **/

	public Boolean isAutopsyResultsAvailable() {
		return autopsyResultsAvailable;
	}

	public void setAutopsyResultsAvailable(Boolean autopsyResultsAvailable) {
		this.autopsyResultsAvailable = autopsyResultsAvailable;
	}

	public IngestContents causeOfDeath(IngestCauseOfDeath causeOfDeath) {
		this.causeOfDeath = causeOfDeath;
		return this;
	}

	/**
	 * Get causeOfDeath
	 * 
	 * @return causeOfDeath
	 **/

	public IngestCauseOfDeath getCauseOfDeath() {
		return causeOfDeath;
	}

	public void setCauseOfDeath(IngestCauseOfDeath causeOfDeath) {
		this.causeOfDeath = causeOfDeath;
	}

	public IngestContents contributedToDeath(List<IngestCauseOfDeath> contributedToDeath) {
		this.contributedToDeath = contributedToDeath;
		return this;
	}

	public IngestContents addContributedToDeathItem(IngestCauseOfDeath contributedToDeathItem) {
		if (this.contributedToDeath == null) {
			this.contributedToDeath = new ArrayList<IngestCauseOfDeath>();
		}
		this.contributedToDeath.add(contributedToDeathItem);
		return this;
	}

	/**
	 * Get contributedToDeath
	 * 
	 * @return contributedToDeath
	 **/

	public List<IngestCauseOfDeath> getContributedToDeath() {
		return contributedToDeath;
	}

	public void setContributedToDeath(List<IngestCauseOfDeath> contributedToDeath) {
		this.contributedToDeath = contributedToDeath;
	}

	public IngestContents datePronouncedDead(ZonedDateTime datePronouncedDead) {
		this.datePronouncedDead = datePronouncedDead;
		return this;
	}

	/**
	 * Get datePronouncedDead
	 * 
	 * @return datePronouncedDead
	 **/

	public ZonedDateTime getDatePronouncedDead() {
		return datePronouncedDead;
	}

	public void setDatePronouncedDead(ZonedDateTime datePronouncedDead) {
		this.datePronouncedDead = datePronouncedDead;
	}

	public IngestContents deathFromWorkInjury(Boolean deathFromWorkInjury) {
		this.deathFromWorkInjury = deathFromWorkInjury;
		return this;
	}

	/**
	 * Get deathFromWorkInjury
	 * 
	 * @return deathFromWorkInjury
	 **/

	public Boolean isDeathFromWorkInjury() {
		return deathFromWorkInjury;
	}

	public void setDeathFromWorkInjury(Boolean deathFromWorkInjury) {
		this.deathFromWorkInjury = deathFromWorkInjury;
	}

	public IngestContents deathFromTransportInjury(Boolean deathFromTransportInjury) {
		this.deathFromTransportInjury = deathFromTransportInjury;
		return this;
	}

	/**
	 * Get deathFromTransportInjury
	 * 
	 * @return deathFromTransportInjury
	 **/

	public Boolean isDeathFromTransportInjury() {
		return deathFromTransportInjury;
	}

	public void setDeathFromTransportInjury(Boolean deathFromTransportInjury) {
		this.deathFromTransportInjury = deathFromTransportInjury;
	}

	public IngestContents placeOfInjury(String placeOfInjury) {
		this.placeOfInjury = placeOfInjury;
		return this;
	}

	/**
	 * Get placeOfInjury
	 * 
	 * @return placeOfInjury
	 **/

	public String getPlaceOfInjury() {
		return placeOfInjury;
	}

	public void setPlaceOfInjury(String placeOfInjury) {
		this.placeOfInjury = placeOfInjury;
	}

	public IngestContents mannerOfDeath(MannerOfDeathEnum mannerOfDeath) {
		this.mannerOfDeath = mannerOfDeath;
		return this;
	}

	/**
	 * Get mannerOfDeath
	 * 
	 * @return mannerOfDeath
	 **/

	public MannerOfDeathEnum getMannerOfDeath() {
		return mannerOfDeath;
	}

	public void setMannerOfDeath(MannerOfDeathEnum mannerOfDeath) {
		this.mannerOfDeath = mannerOfDeath;
	}

	public IngestContents medicalExaminerContacted(Boolean medicalExaminerContacted) {
		this.medicalExaminerContacted = medicalExaminerContacted;
		return this;
	}

	/**
	 * Get medicalExaminerContacted
	 * 
	 * @return medicalExaminerContacted
	 **/

	public Boolean isMedicalExaminerContacted() {
		return medicalExaminerContacted;
	}

	public void setMedicalExaminerContacted(Boolean medicalExaminerContacted) {
		this.medicalExaminerContacted = medicalExaminerContacted;
	}

	public IngestContents timingOfRecentPregnancyInRelationToDeath(String timingOfRecentPregnancyInRelationToDeath) {
		this.timingOfRecentPregnancyInRelationToDeath = timingOfRecentPregnancyInRelationToDeath;
		return this;
	}

	/**
	 * Refer to
	 * https://nightingaleproject.github.io/fhir-death-record/guide/ValueSet-sdr-causeOfDeath-PregnancyStatusVS.html
	 * for the choices of pregnancy status
	 * 
	 * @return timingOfRecentPregnancyInRelationToDeath
	 **/
	public String getTimingOfRecentPregnancyInRelationToDeath() {
		return timingOfRecentPregnancyInRelationToDeath;
	}

	public void setTimingOfRecentPregnancyInRelationToDeath(String timingOfRecentPregnancyInRelationToDeath) {
		this.timingOfRecentPregnancyInRelationToDeath = timingOfRecentPregnancyInRelationToDeath;
	}

	public IngestContents tobaccoUseContributedToDeath(TobaccoUseContributedToDeathEnum tobaccoUseContributedToDeath) {
		this.tobaccoUseContributedToDeath = tobaccoUseContributedToDeath;
		return this;
	}

	/**
	 * Get tobaccoUseContributedToDeath
	 * 
	 * @return tobaccoUseContributedToDeath
	 **/

	public TobaccoUseContributedToDeathEnum getTobaccoUseContributedToDeath() {
		return tobaccoUseContributedToDeath;
	}

	public void setTobaccoUseContributedToDeath(TobaccoUseContributedToDeathEnum tobaccoUseContributedToDeath) {
		this.tobaccoUseContributedToDeath = tobaccoUseContributedToDeath;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		IngestContents contents = (IngestContents) o;
		return Objects.equals(this.actualOrPresumedDateOfDeath, contents.actualOrPresumedDateOfDeath)
				&& Objects.equals(this.autopsyPerformed, contents.autopsyPerformed)
				&& Objects.equals(this.autopsyResultsAvailable, contents.autopsyResultsAvailable)
				&& Objects.equals(this.causeOfDeath, contents.causeOfDeath)
				&& Objects.equals(this.contributedToDeath, contents.contributedToDeath)
				&& Objects.equals(this.datePronouncedDead, contents.datePronouncedDead)
				&& Objects.equals(this.deathFromWorkInjury, contents.deathFromWorkInjury)
				&& Objects.equals(this.deathFromTransportInjury, contents.deathFromTransportInjury)
				&& Objects.equals(this.placeOfInjury, contents.placeOfInjury)
				&& Objects.equals(this.mannerOfDeath, contents.mannerOfDeath)
				&& Objects.equals(this.medicalExaminerContacted, contents.medicalExaminerContacted)
				&& Objects.equals(this.timingOfRecentPregnancyInRelationToDeath,
						contents.timingOfRecentPregnancyInRelationToDeath)
				&& Objects.equals(this.tobaccoUseContributedToDeath, contents.tobaccoUseContributedToDeath);
	}

	@Override
	public int hashCode() {
		return Objects.hash(actualOrPresumedDateOfDeath, autopsyPerformed, autopsyResultsAvailable, causeOfDeath,
				contributedToDeath, datePronouncedDead, deathFromWorkInjury, deathFromTransportInjury, placeOfInjury,
				mannerOfDeath, medicalExaminerContacted, timingOfRecentPregnancyInRelationToDeath,
				tobaccoUseContributedToDeath);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class Contents {\n");

		sb.append("    actualOrPresumedDateOfDeath: ").append(toIndentedString(actualOrPresumedDateOfDeath))
				.append("\n");
		sb.append("    autopsyPerformed: ").append(toIndentedString(autopsyPerformed)).append("\n");
		sb.append("    autopsyResultsAvailable: ").append(toIndentedString(autopsyResultsAvailable)).append("\n");
		sb.append("    causeOfDeath: ").append(toIndentedString(causeOfDeath)).append("\n");
		sb.append("    contributedToDeath: ").append(toIndentedString(contributedToDeath)).append("\n");
		sb.append("    datePronouncedDead: ").append(toIndentedString(datePronouncedDead)).append("\n");
		sb.append("    deathFromWorkInjury: ").append(toIndentedString(deathFromWorkInjury)).append("\n");
		sb.append("    deathFromTransportInjury: ").append(toIndentedString(deathFromTransportInjury)).append("\n");
		sb.append("    placeOfInjury: ").append(toIndentedString(placeOfInjury)).append("\n");
		sb.append("    mannerOfDeath: ").append(toIndentedString(mannerOfDeath)).append("\n");
		sb.append("    medicalExaminerContacted: ").append(toIndentedString(medicalExaminerContacted)).append("\n");
		sb.append("    timingOfRecentPregnancyInRelationToDeath: ")
				.append(toIndentedString(timingOfRecentPregnancyInRelationToDeath)).append("\n");
		sb.append("    tobaccoUseContributedToDeath: ").append(toIndentedString(tobaccoUseContributedToDeath))
				.append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
