/*
 * EDRS Submission API
 * This is the swagger documentation for DeathDataHub's EDRS Submission API. This API's purpose is to allow Medical Examiners and coroners to submit a signed IngestDeathRecord to a remote Electronic Death Record System. Although this is part of the deathdatahub main platform, the parameters are complex enough to warrent it's own swagger doc file
 *
 * OpenAPI spec version: 1.0.0
 * Contact: Michael.Riley@gtri.gatech.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package gatech.edu.DeathRecordPuller.EDRS.model;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Information directly about the decedent
 */
public class IngestDecedent {
	@SerializedName("id")
	private String id = null;

	/**
	 * For reference to what these id types represent, refer to
	 * http://hl7.org/fhir/v2/0203
	 */
	@JsonAdapter(IdtypeEnum.Adapter.class)
	public enum IdtypeEnum {
		DL("DL"),

		PPN("PPN"),

		BRN("BRN"),

		MR("MR"),

		MCN("MCN"),

		EN("EN"),

		TAX("TAX"),

		NIIP("NIIP"),

		PRN("PRN"),

		MD("MD"),

		DR("DR"),

		ACSN("ACSN");

		private String value;

		IdtypeEnum(String value) {
			this.value = value;
		}

		@JsonValue
		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		@JsonCreator
		public static IdtypeEnum fromValue(String text) {
			for (IdtypeEnum b : IdtypeEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		public static class Adapter extends TypeAdapter<IdtypeEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final IdtypeEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public IdtypeEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return IdtypeEnum.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("idtype")
	private IdtypeEnum idtype = null;

	@SerializedName("name")
	private String name = null;

	/**
	 * Gets or Sets birthsex
	 */
	@JsonAdapter(BirthsexEnum.Adapter.class)
	public enum BirthsexEnum {
		F("F"),

		M("M");

		private String value;

		BirthsexEnum(String value) {
			this.value = value;
		}

		@JsonValue
		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		@JsonCreator
		public static BirthsexEnum fromValue(String text) {
			for (BirthsexEnum b : BirthsexEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		public static class Adapter extends TypeAdapter<BirthsexEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final BirthsexEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public BirthsexEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return BirthsexEnum.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("birthsex")
	private BirthsexEnum birthsex = null;

	@SerializedName("ethnicity")
	private String ethnicity = null;

	@SerializedName("race")
	private String race = null;

	@SerializedName("age")
	private Integer age = null;

	@SerializedName("telecom")
	private String telecom = null;

	/**
	 * Gets or Sets gender
	 */
	@JsonAdapter(GenderEnum.Adapter.class)
	public enum GenderEnum {
		MALE("Male"),

		FEMALE("Female"),

		UNKNOWN("Unknown"),

		OTHER("Other");

		private String value;

		GenderEnum(String value) {
			this.value = value;
		}

		@JsonValue
		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}
		
		@JsonCreator
		public static GenderEnum fromValue(String text) {
			for (GenderEnum b : GenderEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		public static class Adapter extends TypeAdapter<GenderEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final GenderEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public GenderEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return GenderEnum.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("gender")
	private GenderEnum gender = null;

	@SerializedName("address")
	private IngestAddress address = null;

	@SerializedName("birthplace")
	private IngestAddress birthplace = null;

	@SerializedName("servedInArmedForces")
	private Boolean servedInArmedForces = null;

	/**
	 * Gets or Sets maritalStatusAtDeath
	 */
	@JsonAdapter(MaritalStatusAtDeathEnum.Adapter.class)
	public enum MaritalStatusAtDeathEnum {
		A("A"),

		D("D"),

		I("I"),

		L("L"),

		M("M"),

		P("P"),

		S("S"),

		T("T"),

		U("U"),

		W("W"),

		UNK("UNK");

		private String value;

		MaritalStatusAtDeathEnum(String value) {
			this.value = value;
		}

		@JsonValue
		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		@JsonCreator
		public static MaritalStatusAtDeathEnum fromValue(String text) {
			for (MaritalStatusAtDeathEnum b : MaritalStatusAtDeathEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		public static class Adapter extends TypeAdapter<MaritalStatusAtDeathEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final MaritalStatusAtDeathEnum enumeration)
					throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public MaritalStatusAtDeathEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return MaritalStatusAtDeathEnum.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("maritalStatusAtDeath")
	private MaritalStatusAtDeathEnum maritalStatusAtDeath = null;

	@SerializedName("placeOfDeath")
	private IngestAddress placeOfDeath = null;

	/**
	 * Gets or Sets placeOfDeathType
	 */
	@JsonAdapter(PlaceOfDeathTypeEnum.Adapter.class)
	public enum PlaceOfDeathTypeEnum {
		HOSPITAL("Hospital"),

		HOME("Home"),

		HOSPICE("Hospice"),

		HOSPITAL_ARRIVAL("Hospital-Arrival"),

		HOSPITAL_EMERGENCY("Hospital-Emergency"),

		NURSING_HOME("Nursing Home"),

		UNKNOWN("Unknown"),

		OTHER("Other");

		private String value;

		PlaceOfDeathTypeEnum(String value) {
			this.value = value;
		}

		@JsonValue
		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		@JsonCreator
		public static PlaceOfDeathTypeEnum fromValue(String text) {
			for (PlaceOfDeathTypeEnum b : PlaceOfDeathTypeEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		public static class Adapter extends TypeAdapter<PlaceOfDeathTypeEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final PlaceOfDeathTypeEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public PlaceOfDeathTypeEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return PlaceOfDeathTypeEnum.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("placeOfDeathType")
	private PlaceOfDeathTypeEnum placeOfDeathType = null;

	@SerializedName("disposition")
	private IngestDisposition disposition = null;

	/**
	 * Gets or Sets education
	 */
	@JsonAdapter(EducationEnum.Adapter.class)
	public enum EducationEnum {
		_8TH_GRADE("8th grade"),

		SOME_HIGHSCHOOL("Some highschool"),

		HIGHSCHOOL("Highschool"),

		SOME_COLLEGE("Some college"),

		ASSOCIATE_DEGREE("Associate Degree"),

		BACHELOR_DEGREE("Bachelor Degree"),

		MASTER_DEGREE("Master Degree"),

		DOCTORATE("Doctorate"),

		UNKNOWN("Unknown");

		private String value;

		EducationEnum(String value) {
			this.value = value;
		}

		@JsonValue
		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		@JsonCreator
		public static EducationEnum fromValue(String text) {
			for (EducationEnum b : EducationEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		public static class Adapter extends TypeAdapter<EducationEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final EducationEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public EducationEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return EducationEnum.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("education")
	private EducationEnum education = null;

	@SerializedName("occupation-job")
	private String occupationJob = null;

	@SerializedName("occupation-industry")
	private String occupationIndustry = null;

	@SerializedName("relations")
	private List<IngestRelatedPerson> relations = null;

	public IngestDecedent id(String id) {
		this.id = id;
		return this;
	}

	/**
	 * Get id
	 * 
	 * @return id
	 **/

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public IngestDecedent idtype(IdtypeEnum idtype) {
		this.idtype = idtype;
		return this;
	}

	/**
	 * For reference to what these id types represent, refer to
	 * http://hl7.org/fhir/v2/0203
	 * 
	 * @return idtype
	 **/
	public IdtypeEnum getIdtype() {
		return idtype;
	}

	public void setIdtype(IdtypeEnum idtype) {
		this.idtype = idtype;
	}

	public IngestDecedent name(String name) {
		this.name = name;
		return this;
	}

	/**
	 * Get name
	 * 
	 * @return name
	 **/

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public IngestDecedent birthsex(BirthsexEnum birthsex) {
		this.birthsex = birthsex;
		return this;
	}

	/**
	 * Get birthsex
	 * 
	 * @return birthsex
	 **/

	public BirthsexEnum getBirthsex() {
		return birthsex;
	}

	public void setBirthsex(BirthsexEnum birthsex) {
		this.birthsex = birthsex;
	}

	public IngestDecedent ethnicity(String ethnicity) {
		this.ethnicity = ethnicity;
		return this;
	}

	/**
	 * Get ethnicity
	 * 
	 * @return ethnicity
	 **/

	public String getEthnicity() {
		return ethnicity;
	}

	public void setEthnicity(String ethnicity) {
		this.ethnicity = ethnicity;
	}

	public IngestDecedent race(String race) {
		this.race = race;
		return this;
	}

	/**
	 * Get race
	 * 
	 * @return race
	 **/

	public String getRace() {
		return race;
	}

	public void setRace(String race) {
		this.race = race;
	}

	public IngestDecedent age(Integer age) {
		this.age = age;
		return this;
	}

	/**
	 * Get age
	 * 
	 * @return age
	 **/

	public Integer getAge() {
		return age;
	}

	public void setAge(Integer age) {
		this.age = age;
	}

	public IngestDecedent telecom(String telecom) {
		this.telecom = telecom;
		return this;
	}

	/**
	 * Get telecom
	 * 
	 * @return telecom
	 **/

	public String getTelecom() {
		return telecom;
	}

	public void setTelecom(String telecom) {
		this.telecom = telecom;
	}

	public IngestDecedent gender(GenderEnum gender) {
		this.gender = gender;
		return this;
	}

	/**
	 * Get gender
	 * 
	 * @return gender
	 **/

	public GenderEnum getGender() {
		return gender;
	}

	public void setGender(GenderEnum gender) {
		this.gender = gender;
	}

	public IngestDecedent address(IngestAddress address) {
		this.address = address;
		return this;
	}

	/**
	 * Get address
	 * 
	 * @return address
	 **/

	public IngestAddress getAddress() {
		return address;
	}

	public void setAddress(IngestAddress address) {
		this.address = address;
	}

	public IngestDecedent birthplace(IngestAddress birthplace) {
		this.birthplace = birthplace;
		return this;
	}

	/**
	 * Get birthplace
	 * 
	 * @return birthplace
	 **/

	public IngestAddress getBirthplace() {
		return birthplace;
	}

	public void setBirthplace(IngestAddress birthplace) {
		this.birthplace = birthplace;
	}

	public IngestDecedent servedInArmedForces(Boolean servedInArmedForces) {
		this.servedInArmedForces = servedInArmedForces;
		return this;
	}

	/**
	 * Get servedInArmedForces
	 * 
	 * @return servedInArmedForces
	 **/

	public Boolean isServedInArmedForces() {
		return servedInArmedForces;
	}

	public void setServedInArmedForces(Boolean servedInArmedForces) {
		this.servedInArmedForces = servedInArmedForces;
	}

	public IngestDecedent maritalStatusAtDeath(MaritalStatusAtDeathEnum maritalStatusAtDeath) {
		this.maritalStatusAtDeath = maritalStatusAtDeath;
		return this;
	}

	/**
	 * Get maritalStatusAtDeath
	 * 
	 * @return maritalStatusAtDeath
	 **/

	public MaritalStatusAtDeathEnum getMaritalStatusAtDeath() {
		return maritalStatusAtDeath;
	}

	public void setMaritalStatusAtDeath(MaritalStatusAtDeathEnum maritalStatusAtDeath) {
		this.maritalStatusAtDeath = maritalStatusAtDeath;
	}

	public IngestDecedent placeOfDeath(IngestAddress placeOfDeath) {
		this.placeOfDeath = placeOfDeath;
		return this;
	}

	/**
	 * Get placeOfDeath
	 * 
	 * @return placeOfDeath
	 **/

	public IngestAddress getPlaceOfDeath() {
		return placeOfDeath;
	}

	public void setPlaceOfDeath(IngestAddress placeOfDeath) {
		this.placeOfDeath = placeOfDeath;
	}

	public IngestDecedent placeOfDeathType(PlaceOfDeathTypeEnum placeOfDeathType) {
		this.placeOfDeathType = placeOfDeathType;
		return this;
	}

	/**
	 * Get placeOfDeathType
	 * 
	 * @return placeOfDeathType
	 **/

	public PlaceOfDeathTypeEnum getPlaceOfDeathType() {
		return placeOfDeathType;
	}

	public void setPlaceOfDeathType(PlaceOfDeathTypeEnum placeOfDeathType) {
		this.placeOfDeathType = placeOfDeathType;
	}

	public IngestDecedent disposition(IngestDisposition disposition) {
		this.disposition = disposition;
		return this;
	}

	/**
	 * Get disposition
	 * 
	 * @return disposition
	 **/

	public IngestDisposition getDisposition() {
		return disposition;
	}

	public void setDisposition(IngestDisposition disposition) {
		this.disposition = disposition;
	}

	public IngestDecedent education(EducationEnum education) {
		this.education = education;
		return this;
	}

	/**
	 * Get education
	 * 
	 * @return education
	 **/

	public EducationEnum getEducation() {
		return education;
	}

	public void setEducation(EducationEnum education) {
		this.education = education;
	}

	public IngestDecedent occupationJob(String occupationJob) {
		this.occupationJob = occupationJob;
		return this;
	}

	/**
	 * Get occupationJob
	 * 
	 * @return occupationJob
	 **/

	public String getOccupationJob() {
		return occupationJob;
	}

	public void setOccupationJob(String occupationJob) {
		this.occupationJob = occupationJob;
	}

	public IngestDecedent occupationIndustry(String occupationIndustry) {
		this.occupationIndustry = occupationIndustry;
		return this;
	}

	/**
	 * Get occupationIndustry
	 * 
	 * @return occupationIndustry
	 **/

	public String getOccupationIndustry() {
		return occupationIndustry;
	}

	public void setOccupationIndustry(String occupationIndustry) {
		this.occupationIndustry = occupationIndustry;
	}

	public IngestDecedent relations(List<IngestRelatedPerson> relations) {
		this.relations = relations;
		return this;
	}

	public IngestDecedent addRelationsItem(IngestRelatedPerson relationsItem) {
		if (this.relations == null) {
			this.relations = new ArrayList<IngestRelatedPerson>();
		}
		this.relations.add(relationsItem);
		return this;
	}

	/**
	 * Get relations
	 * 
	 * @return relations
	 **/

	public List<IngestRelatedPerson> getRelations() {
		return relations;
	}

	public void setRelations(List<IngestRelatedPerson> relations) {
		this.relations = relations;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		IngestDecedent decedent = (IngestDecedent) o;
		return Objects.equals(this.id, decedent.id) && Objects.equals(this.idtype, decedent.idtype)
				&& Objects.equals(this.name, decedent.name) && Objects.equals(this.birthsex, decedent.birthsex)
				&& Objects.equals(this.ethnicity, decedent.ethnicity) && Objects.equals(this.race, decedent.race)
				&& Objects.equals(this.age, decedent.age) && Objects.equals(this.telecom, decedent.telecom)
				&& Objects.equals(this.gender, decedent.gender) && Objects.equals(this.address, decedent.address)
				&& Objects.equals(this.birthplace, decedent.birthplace)
				&& Objects.equals(this.servedInArmedForces, decedent.servedInArmedForces)
				&& Objects.equals(this.maritalStatusAtDeath, decedent.maritalStatusAtDeath)
				&& Objects.equals(this.placeOfDeath, decedent.placeOfDeath)
				&& Objects.equals(this.placeOfDeathType, decedent.placeOfDeathType)
				&& Objects.equals(this.disposition, decedent.disposition)
				&& Objects.equals(this.education, decedent.education)
				&& Objects.equals(this.occupationJob, decedent.occupationJob)
				&& Objects.equals(this.occupationIndustry, decedent.occupationIndustry)
				&& Objects.equals(this.relations, decedent.relations);
	}

	@Override
	public int hashCode() {
		return Objects.hash(id, idtype, name, birthsex, ethnicity, race, age, telecom, gender, address, birthplace,
				servedInArmedForces, maritalStatusAtDeath, placeOfDeath, placeOfDeathType, disposition, education,
				occupationJob, occupationIndustry, relations);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class Decedent {\n");

		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    idtype: ").append(toIndentedString(idtype)).append("\n");
		sb.append("    name: ").append(toIndentedString(name)).append("\n");
		sb.append("    birthsex: ").append(toIndentedString(birthsex)).append("\n");
		sb.append("    ethnicity: ").append(toIndentedString(ethnicity)).append("\n");
		sb.append("    race: ").append(toIndentedString(race)).append("\n");
		sb.append("    age: ").append(toIndentedString(age)).append("\n");
		sb.append("    telecom: ").append(toIndentedString(telecom)).append("\n");
		sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
		sb.append("    address: ").append(toIndentedString(address)).append("\n");
		sb.append("    birthplace: ").append(toIndentedString(birthplace)).append("\n");
		sb.append("    servedInArmedForces: ").append(toIndentedString(servedInArmedForces)).append("\n");
		sb.append("    maritalStatusAtDeath: ").append(toIndentedString(maritalStatusAtDeath)).append("\n");
		sb.append("    placeOfDeath: ").append(toIndentedString(placeOfDeath)).append("\n");
		sb.append("    placeOfDeathType: ").append(toIndentedString(placeOfDeathType)).append("\n");
		sb.append("    disposition: ").append(toIndentedString(disposition)).append("\n");
		sb.append("    education: ").append(toIndentedString(education)).append("\n");
		sb.append("    occupationJob: ").append(toIndentedString(occupationJob)).append("\n");
		sb.append("    occupationIndustry: ").append(toIndentedString(occupationIndustry)).append("\n");
		sb.append("    relations: ").append(toIndentedString(relations)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
