/*
 * EDRS Submission API
 * This is the swagger documentation for DeathDataHub's EDRS Submission API. This API's purpose is to allow Medical Examiners and coroners to submit a signed IngestDeathRecord to a remote Electronic Death Record System. Although this is part of the deathdatahub main platform, the parameters are complex enough to warrent it's own swagger doc file
 *
 * OpenAPI spec version: 1.0.0
 * Contact: Michael.Riley@gtri.gatech.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package gatech.edu.DeathRecordPuller.EDRS.model;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * A structural representation of a location. Note that Addresses require at
 * least the unformatted text field or the line field to be considered
 */
public class IngestAddress {
	/**
	 * Gets or Sets type
	 */
	@JsonAdapter(TypeEnum.Adapter.class)
	public enum TypeEnum {
		POSTAL("postal"),

		PHYSICAL("physical"),

		BOTH("both");

		private String value;

		TypeEnum(String value) {
			this.value = value;
		}

		@JsonValue
		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		@JsonCreator
		public static TypeEnum fromValue(String text) {
			for (TypeEnum b : TypeEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		public static class Adapter extends TypeAdapter<TypeEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public TypeEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return TypeEnum.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("type")
	private TypeEnum type = null;

	@SerializedName("text")
	private String text = null;

	@SerializedName("line")
	private List<String> line = null;

	@SerializedName("city")
	private String city = null;

	@SerializedName("district")
	private String district = null;

	@SerializedName("state")
	private String state = null;

	@SerializedName("postalCode")
	private String postalCode = null;

	@SerializedName("country")
	private String country = null;

	@SerializedName("insidecitylimits")
	private Boolean insideCityLimits = null;

	public IngestAddress type(TypeEnum type) {
		this.type = type;
		return this;
	}

	/**
	 * Get type
	 * 
	 * @return type
	 **/
	public TypeEnum getType() {
		return type;
	}

	public void setType(TypeEnum type) {
		this.type = type;
	}

	public IngestAddress text(String text) {
		this.text = text;
		return this;
	}

	/**
	 * Get text
	 * 
	 * @return text
	 **/
	public String getText() {
		return text;
	}

	public void setText(String text) {
		this.text = text;
	}

	public IngestAddress line(List<String> line) {
		this.line = line;
		return this;
	}

	public IngestAddress addLineItem(String lineItem) {
		if (this.line == null) {
			this.line = new ArrayList<String>();
		}
		this.line.add(lineItem);
		return this;
	}

	/**
	 * Get line
	 * 
	 * @return line
	 **/
	public List<String> getLine() {
		return line;
	}

	public void setLine(List<String> line) {
		this.line = line;
	}

	public IngestAddress city(String city) {
		this.city = city;
		return this;
	}

	/**
	 * Get city
	 * 
	 * @return city
	 **/
	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	public IngestAddress district(String district) {
		this.district = district;
		return this;
	}

	/**
	 * Get district
	 * 
	 * @return district
	 **/
	public String getDistrict() {
		return district;
	}

	public void setDistrict(String district) {
		this.district = district;
	}

	public IngestAddress state(String state) {
		this.state = state;
		return this;
	}

	public String getState() {
		return state;
	}

	public void setState(String state) {
		this.state = state;
	}

	public IngestAddress postalCode(String postalCode) {
		this.postalCode = postalCode;
		return this;
	}

	public String getPostalCode() {
		return postalCode;
	}

	public void setPostalCode(String postalCode) {
		this.postalCode = postalCode;
	}

	public IngestAddress country(String country) {
		this.country = country;
		return this;
	}

	/**
	 * Get country
	 * 
	 * @return country
	 **/
	public String getCountry() {
		return country;
	}

	public void setCountry(String country) {
		this.country = country;
	}

	public IngestAddress insideCityLimits(boolean insideCityLimits) {
		this.insideCityLimits = insideCityLimits;
		return this;
	}

	/**
	 * Get insideCityLimits
	 * 
	 * @return insideCityLimits
	 **/
	public boolean getInsideCityLimits() {
		return insideCityLimits;
	}

	public void setInsideCityLimits(boolean insideCityLimits) {
		this.insideCityLimits = insideCityLimits;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		IngestAddress address = (IngestAddress) o;
		return Objects.equals(this.type, address.type) && Objects.equals(this.text, address.text)
				&& Objects.equals(this.line, address.line) && Objects.equals(this.city, address.city)
				&& Objects.equals(this.district, address.district) && Objects.equals(this.state, address.state)
				&& Objects.equals(this.postalCode, address.postalCode) && Objects.equals(this.country, address.country)
				&& Objects.equals(this.insideCityLimits, address.insideCityLimits);
	}

	@Override
	public int hashCode() {
		return Objects.hash(type, text, line, city, district, state, postalCode, country, insideCityLimits);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class Address {\n");

		sb.append("    type: ").append(toIndentedString(type)).append("\n");
		sb.append("    text: ").append(toIndentedString(text)).append("\n");
		sb.append("    line: ").append(toIndentedString(line)).append("\n");
		sb.append("    city: ").append(toIndentedString(city)).append("\n");
		sb.append("    district: ").append(toIndentedString(district)).append("\n");
		sb.append("    state: ").append(toIndentedString(state)).append("\n");
		sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
		sb.append("    country: ").append(toIndentedString(country)).append("\n");
		sb.append("    insideCityLimits: ").append(toIndentedString(insideCityLimits)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
